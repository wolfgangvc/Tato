<?php

namespace Tato\Test;

use Tato\Models\User;
use Tato\Services\PostService;
use Tato\Models\Post;
use Tato\Services\UserService;
use Tato\Test\Mocks\TestSessionService;
use Thru\ActiveRecord\SearchIndex;

class PostServiceTest extends BaseTest
{
    /** @var  PostService */
    protected $postService;

    /** @var  TestSessionService */
    protected $sessionService;
    /** @var  UserService */
    protected $userService;

    protected $password = "Fak3P455**";

    public static function setUpBeforeClass()
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub

        User::deleteTable();
        Post::deleteTable();
    }

    public function setUp()
    {
        parent::setUp();
        $this->sessionService = new TestSessionService();
        $this->sessionService->start();
        $this->userService = new UserService($this->sessionService);

        $this->postService = new PostService($this->sessionService);
    }

    /**
     * @expectedException \Tato\Exceptions\NewPostException
     * @expectedExceptionMessageRegExp /Post title too short : \"(.*)\"/
     */
    public function testPostServiceNewPostBlank()
    {
        $this->postService->newPost("", "");
    }

    /**
     * @expectedException \Tato\Exceptions\NewPostException
     * @expectedExceptionMessageRegExp /Post body too short : \"(.*)\"/
     */
    public function testPostServiceNewPostNobody()
    {
        $this->postService->newPost("Test", "");
    }

    /**
     * @expectedException \Tato\Exceptions\NewPostException
     * @expectedExceptionMessage No valid user session for new post.
     */
    public function testPostServiceNewPostNoLogin()
    {
        $this->postService->newPost("Test Title", "Test Body");
    }

    public function testPostServiceNewPostValid()
    {
        $data = new PostServiceTestData();

        $data->fakeUser1 = $this->userService->newUser(
            $this->faker->safeEmail,
            $this->faker->userName,
            $this->password
        );
        $data->fakeUser2 = $this->userService->newUser(
            $this->faker->safeEmail,
            $this->faker->userName,
            $this->password
        );



        $user = $this->userService->loginUser($data->fakeUser1->name, $this->password);

        $this->assertInstanceOf(User::class, $user);

        $postArray = array();
        for ($i = 1; $i < 4; $i++) {
            $postArray[] = $this->postService->newPost("Test Title {$i}", "Test Body {$i}");
        }
        $this->assertEquals(3, count($postArray));

        $data->postArray = $postArray;

        return $data;
    }

    /**
     * @depends testPostServiceNewPostValid
     */
    public function testPostServicePostContent(PostServiceTestData $data)
    {
        /** @var  $post Post */
        /** @var  $testPost Post*/
        foreach ($data->postArray as $post) {
            $testPost = Post::search()->where("post_id", $post->post_id)->execOne();
            $this->assertInstanceOf(Post::class, $testPost);
            $this->assertEquals($post, $testPost);
        }

        return $data;
    }

    /**
     * @depends testPostServicePostContent
     */
    public function testPostServiceGetByID(PostServiceTestData $data)
    {
        $post = $this->postService->getByID(-1);
        $this->assertFalse($post);

        foreach ($data->postArray as $post) {
            $testPost = $this->postService->getByID($post->post_id);
            $this->assertInstanceOf(Post::class, $testPost);
            $this->assertEquals($post, $testPost);
        }

        return $data;
    }

    /**
     * @depends testPostServiceGetByID
     */
    public function testPostServiceGetByUserID(PostServiceTestData $data)
    {
        $posts = $this->postService->getByUserID(-1);
        $this->assertFalse($posts);

        $posts = $this->postService->getByUserID($data->fakeUser2->user_id);
        $this->assertEmpty($posts);

        $posts = $this->postService->getByUserID($data->fakeUser1->user_id);
        $this->assertEquals(3, count($posts));

        return $data;
    }

    /**
    * @depends testPostServiceGetByUserID
    */
    public function testPostServiceGetPosts(PostServiceTestData $data)
    {
        $posts = $this->postService->getPosts();
        $this->assertEquals(3, count($posts));
        return $data;
    }

    /**
     * @depends testPostServiceGetPosts
     */
    public function testPostServiceGetPostCount(PostServiceTestData $data)
    {
        $posts = $this->postService->getPostCount();
        $this->assertEquals(3, $posts);
        return $data;
    }

    /**
     * @depends testPostServiceGetPostCount
     */
    public function testPostServiceGetLatestPost(PostServiceTestData $data)
    {
        $post = $this->postService->getLatestPost();
        $this->assertEquals($data->postArray[2], $post);

        return $data;
    }

    /**
     * @depends testPostServiceGetLatestPost
     * @expectedException \Tato\Exceptions\EditPostException
     * @expectedExceptionMessage User ID does not match post
     */
    public function testPostServiceEditPostInvalidUser(PostServiceTestData $data)
    {
        $this->userService->loginUser($data->fakeUser2->name, $this->password);

        $this->postService->editPost(
            $data->postArray[0]->post_id,
            $data->postArray[0]->title . " EDIT",
            $data->postArray[0]->body . " EDIT"
        );
    }

    /**
     * @depends testPostServiceGetLatestPost
     * @expectedException \Tato\Exceptions\EditPostException
     * @expectedExceptionMessage Title or Body invalid
     */
    public function testPostServiceEditPostInvalidTitleBody(PostServiceTestData $data)
    {
        $this->userService->loginUser($data->fakeUser1->name, $this->password);

        $this->postService->editPost(
            $data->postArray[0]->post_id,
            "",
            ""
        );
    }

    /**
     * @depends testPostServiceGetLatestPost
     * @expectedException \Tato\Exceptions\EditPostException
     * @expectedExceptionMessage Post ID invalid :
     */
    public function testPostServiceEditPostInvalidPostID(PostServiceTestData $data)
    {
        $this->userService->loginUser($data->fakeUser1->name, $this->password);

        $this->postService->editPost(
            -1,
            "test title",
            "test body"
        );
    }

    /**
     * @depends testPostServiceGetLatestPost
     * @expectedException \Tato\Exceptions\EditPostException
     * @expectedExceptionMessage No post found with id :
     */
    public function testPostServiceEditPostInvalidPostIDDoesntExist(PostServiceTestData $data)
    {
        $this->userService->loginUser($data->fakeUser1->name, $this->password);

        $this->postService->editPost(
            10000,
            "test title",
            "test body"
        );
    }

    /**
     * @depends testPostServiceGetLatestPost
     */
    public function testPostServiceEditPostValid(PostServiceTestData $data)
    {
        $this->userService->loginUser($data->fakeUser1->name, $this->password);

        $this->postService->editPost(
            $data->postArray[0]->post_id,
            $data->postArray[0]->title . " EDIT",
            $data->postArray[0]->body . " EDIT"
        );
        /** @var  $post Post*/
        $post = Post::search()->where("post_id", $data->postArray[0]->post_id)->execOne();

        $this->assertInstanceOf(Post::class, $post);

        $this->assertEquals(
            $data->postArray[0]->title . " EDIT",
            $post->title
        );

        $this->assertEquals(
            $data->postArray[0]->body . " EDIT",
            $post->body
        );
    }

    /**
     * @depends testPostServiceGetLatestPost
     * @expectedException \Tato\Exceptions\DeletePostException
     * @expectedExceptionMessage User Not Valid :
     */
    public function testPostServiceDeletePostByIDLogicalInvalidUser(PostServiceTestData $data)
    {
        $this->userService->loginUser($data->fakeUser2->name, $this->password);

        $this->postService->deletePostByID($data->postArray[0]->post_id);
    }

    /**
     * @depends testPostServiceGetLatestPost
     * @expectedException \Tato\Exceptions\DeletePostException
     * @expectedExceptionMessage No Valid User Session
     */
    public function testPostServiceDeletePostByIDLogicalNoUser(PostServiceTestData $data)
    {
        $this->postService->deletePostByID($data->postArray[0]->post_id);
    }

    /**
     * @depends testPostServiceGetLatestPost
     * @expectedException \Tato\Exceptions\DeletePostException
     * @expectedExceptionMessage No post with id :
     */
    public function testPostServiceDeletePostByIDLogicalDoesntExist(PostServiceTestData $data)
    {
        $this->postService->deletePostByID(10000);
    }

    /**
     * @depends testPostServiceGetLatestPost
     * @expectedException \Tato\Exceptions\DeletePostException
     * @expectedExceptionMessage Invalid Post ID :
     */
    public function testPostServiceDeletePostByIDLogicalInvalidID(PostServiceTestData $data)
    {
        $this->postService->deletePostByID(-1);
    }

    /**
     * @depends testPostServiceGetLatestPost
     */
    public function testPostServiceDeletePostByIDLogical(PostServiceTestData $data)
    {
        $this->userService->loginUser($data->fakeUser1->name, $this->password);

        $this->postService->deletePostByID($data->postArray[0]->post_id);

        /** @var $post Post */
        $post = Post::search()->where("post_id", $data->postArray[0]->post_id)->execOne();

        $this->assertEquals(Post::STATE_IS_DELETED, $post->deleted);

        return $data;
    }

    /**
     * @depends testPostServiceGetLatestPost
     */
    public function testPostServiceDeletePostByID(PostServiceTestData $data)
    {
        $this->userService->loginUser($data->fakeUser1->name, $this->password);

        $this->postService->deletePostByID($data->postArray[0]->post_id, false);

        return $data;
    }

    /**
     * @depends testPostServiceDeletePostByID
     */
    public function testPostServiceDeletePostByIDCache(PostServiceTestData $data)
    {
        // Fix for bug in Active Record See : https://github.com/Thruio/ActiveRecord/pull/26
        SearchIndex::getInstance()->wipe();
        /** @var $user User */
        $post = Post::search()->where("post_id", $data->postArray[0]->post_id)->execOne();

        $this->assertFalse($post);
    }




    public static function tearDownAfterClass()
    {
        parent::tearDownAfterClass();

        User::deleteTable();
        Post::deleteTable();
    }
}

class PostServiceTestData
{
    public $postArray;
    /** @var  User */
    public $fakeUser1;
    /** @var  User */
    public $fakeUser2;
}
